package utilities;

import java.io.FileInputStream;
import java.io.FileOutputStream;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelUtils {

	public static FileInputStream fis;
	public static FileOutputStream fos;
	public static XSSFWorkbook workbook;
	public static XSSFSheet sheet;
	public static XSSFRow row;
	public static XSSFCell cell;
	public static CellStyle style;

	public static int getRowCount(String xlfile, String xlSheet) throws Exception {
		fis = new FileInputStream(xlfile);
		workbook = new XSSFWorkbook(fis);
		sheet = workbook.getSheet(xlSheet);
		int rowCount = sheet.getLastRowNum();
		workbook.close();
		fis.close();
		return rowCount;

	}

	public static int getCellCount(String xlfile, String xlSheet, int rowNum) throws Exception {
		fis = new FileInputStream(xlfile);
		workbook = new XSSFWorkbook(fis);
		sheet = workbook.getSheet(xlSheet);
		row = sheet.getRow(rowNum);
		int cellCount = row.getLastCellNum();
		workbook.close();
		fis.close();
		return cellCount;

	}

	public static String getCellData(String xlfile, String xlSheet, int rowNum, int colNum) throws Exception {

		fis = new FileInputStream(xlfile);
		workbook = new XSSFWorkbook();
		sheet = workbook.getSheet(xlSheet);
		row = sheet.getRow(rowNum);
		cell = row.getCell(colNum);

		String data;
		try {

			// data = cell.toString();
			DataFormatter formatter = new DataFormatter();// apache class provided
			data = formatter.formatCellValue(cell);// Returns formatted value of a cell as a String regardless of cell
													// type

		} catch (Exception e) {
			data = "";

		}
		workbook.close();
		fis.close();

		return data;

	}

	public static void setCellData(String xlfile, String xlsheet, int rowNum, int colNum, String data)
			throws Exception {
		fis = new FileInputStream(xlfile);
		workbook = new XSSFWorkbook();
		sheet = workbook.getSheet(xlsheet);
		row = sheet.getRow(rowNum);

		cell = row.createCell(colNum);
		cell.setCellValue(data);

		fos = new FileOutputStream(xlfile);
		workbook.write(fos);
		workbook.close();
		fis.close();
		fos.close();

	}

	public static void fillGreenColor(String xlfile, String xlsheet, int rowNum, int colNum) throws Exception {
		fis = new FileInputStream(xlfile);
		workbook = new XSSFWorkbook();
		sheet = workbook.getSheet(xlsheet);
		row = sheet.getRow(rowNum);
		cell = row.getCell(colNum);

		style = workbook.createCellStyle();

		style.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

		cell.setCellStyle(style);

		fos = new FileOutputStream(xlfile);
		workbook.write(fos);
		workbook.close();
		fis.close();
		fos.close();

	}

	public static void fillRedColor(String xlfile, String xlsheet, int rowNum, int colNum) throws Exception {
		fis = new FileInputStream(xlfile);
		workbook = new XSSFWorkbook();
		sheet = workbook.getSheet(xlsheet);
		row = sheet.getRow(rowNum);
		cell = row.getCell(colNum);

		style = workbook.createCellStyle();

		style.setFillForegroundColor(IndexedColors.RED.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

		cell.setCellStyle(style);

		fos = new FileOutputStream(xlfile);
		workbook.write(fos);
		workbook.close();
		fis.close();
		fos.close();

	}

}
